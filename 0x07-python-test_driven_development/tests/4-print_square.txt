The ``4-print_square`` module
============================

Using ``print_square``
---------------------

Importing function from the module:

    >>> print_square = __import__('4-print_square').print_square

Printing squares of different sizes:

    >>> print_square(0)
    >>> print_square(1)
    #
    >>> print_square(2)
    ##
    ##
    >>> print_square(3)
    ###
    ###
    ###
    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Testing edge cases:

Passing a float should raise a TypeError, even if it's a valid integer value:

    >>> print_square(10.0)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

Passing a string as the size:

    >>> print_square('5')
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

Passing a negative number:

    >>> print_square(-1)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

Passing None as the size:

    >>> print_square(None)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

Missing argument for the function call:

    >>> print_square()
    Traceback (most recent call last):
        ...
    TypeError: print_square() missing 1 required positional argument: 'size'
